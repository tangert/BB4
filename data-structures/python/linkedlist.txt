class LinkedList(object):
        
    class Node(object):
        data = 0
        next = None
        
        def __init__(self, data=None, next_node=None):
            self.data = data

            
    head = Node()
    count = 0
        
    //constructor
    def __init__(self):
        self.head = None

    def addToHead(self, data):
        new_node = Node(data)
        new_node.set_next(self.head)
        self.head = new_node
    
    def addToTail(self, data):
        new_node = Node(data)
        new_node.set_next(self.head)
        self.head = new_node
    
    def addAtIndex(self, data):
        new_node = Node(data)
        new_node.set_next(self.head)
        self.head = new_node

	public void addAtIndex(Object data, int index) {
		Node temp = new Node(data);
		Node current = head;
 
		if (current != null) {
            for (int i = 0; i < index && current.getNext() != null; i++) {
				current = current.getNext();
			}
		}
 
		temp.setNext(current.getNext());
 		current.setNext(temp);
 
		counter++;
	}
    

    def delete(self, data):
        current = self.head
        previous = None
        found = False
        while current and found is False:
            if current.get_data() == data:
                found = True
            else:
                previous = current
                current = current.get_next()
        if current is None:
            raise ValueError("Data not in list")
        if previous is None:
            self.head = current.get_next()
        else:
            previous.set_next(current.get_next())
            
        
    def get(self, data):
        current = self.head
        found = False
        while current and found is False:
            if current.get_data() == data:
                found = True
            else:
                current = current.get_next()
        if current is None:
            raise ValueError("Data not in list")
        return current
            
    def size(self):
        return count

