using System;
 
public class LinkedList {
 
        public class Node {
            public object NodeContent;
            public Node Next;
        }

        private int size;
        public int Count {
            get {
                return size;
            }
        }

        private Node head;
        private Node current;

        public LinkedList() {
            size = 0;
            head = null;
        }


        public void Add(object content) {
            size++;

            // This is a more verbose implementation to avoid adding nodes to the head of the list
            var node = new Node() {
                NodeContent = content
            };

            if (head == null) {
                // This is the first node. Make it the head
                head = node;
            } else {
                // This is not the head. Make it current's next node.
                current.Next = node;
            }

            // Makes newly added node the current node
            current = node;

        }

        public Node Retrieve(int Position) {
            Node tempNode = head;
            Node retNode = null;
            int count = 0;

            while (tempNode != null) {
                if (count == Position - 1) {
                    retNode = tempNode;
                    break;
                }
                count++;
                tempNode = tempNode.Next;
            }

            return retNode;
        }

        public bool Delete(int Position) {
            if (Position == 1) {
                head = null;
                current = null;
                return true;
            }

            if (Position > 1 && Position <= size) {
                Node tempNode = head;

                Node lastNode = null;
                int count = 0;

                while (tempNode != null) {
                    if (count == Position - 1) {
                        lastNode.Next = tempNode.Next;
                        return true;
                    }
                    count++;

                    lastNode = tempNode;
                    tempNode = tempNode.Next;
                }
            }

            return false;
        }
    }
}