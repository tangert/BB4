public class LinkedList {
 
	private static int counter;
	private Node head;
 
    //default constructor
	public LinkedList() {
        first = null;
	}
 
	// adds an element to the end of this list
	public void add(Object data) {
 
		if (head == null) {
			head = new Node(data);
		}
 
		Node temp = new Node(data);
		Node current = head;
 
		if (current != null) {
			while (current.getNext() != null) {
				current = current.getNext();
			}
            current.setNext(temp);
        }
 
		// increment the number of elements variable
		counter++
	}
 
    //adds an element to a specified index
	public void addAtIndex(Object data, int index) {
		Node temp = new Node(data);
		Node current = head;
 
		if (current != null) {
            for (int i = 0; i < index && current.getNext() != null; i++) {
				current = current.getNext();
			}
		}
 
		temp.setNext(current.getNext());
 		current.setNext(temp);
 
		counter++;
	}
    
    public boolean remove() {

        Node temp = first;

        while(temp.next.next != null) {
          temp = temp.next;
        }

        temp.next = null;
    
    }
    
	public boolean removeAtIndex(int index) {
 
		// if the index is out of range, exit
		if (index < 1 || index > size())
			return false;
 
		Node current = head;
		if (head != null) {
			for (int i = 0; i < index; i++) {
				if (current.getNext() == null)
					return false;
 
				current = current.getNext();
			}
			current.setNext(current.getNext().getNext());
 
			counter--;
			return true;
 
		}
		return false;
	}
 
	public Object get(int index) {
		// index must be 1 or higher
		if (index < 0) return null;
		Node current = null;
		
        if (head != null) {
			current = head.getNext();
			for (int i = 0; i < index; i++) {
				if (current.getNext() == null)
					return null;
 
				current = current.getNext();
			}
			return current.getData();
		}
		return current;
 
	}
    
	public int size() {
		return counter;
	}
}

public class Node {

    Node next;
    Object data;

    public Node(Object dataValue) {
        next = null;
        data = dataValue;
    }

    public Object getData() {
        return data;
    }

    public void setData(Object dataValue) {
        data = dataValue;
    }

    public Node getNext() {
        return next;
    }

    public void setNext(Node nextValue) {
        next = nextValue;
    }

}