public class LinkedList {
 
    class Node { 
        int data;
        Node next;
        
        public Node(int data) {
            this.data = data;
        }
    }
    
    private Node head;
    private static int counter;

    //constructor
	public LinkedList() {
        self.head = null;
	}
     
	// adds an element to the end of this list
    public void addToHead(int data) {
        Node newNode = new Node(data);

		if (head == null) {
			head = newNode;
		}
        
		if (head != null) {
            
            newNode.next = head;
            head = newNode;
        }
            
 		counter++
	}
 

    public void addToTail(Object data) {
        Node newNode = new Node();

		if (head == null) {
			head = newNode;
		}
 
		Node current = head;
 
		if (current != null) {
			while (current.next != null) {
				current = current.next;
			}
            current.next = newNode;
        }
        
 		counter++
	}
 
    //adds an element to a specified index
    
    public void addAtIndex(int data, int index) {
        Node newNode = new Node();
		Node current = head;
        
        newNode.data = data;
 
		if (current != null) {
            for (int i = 0; i < index; i++) {
				current = current.next;
			}
		}
 
		newNode.next = current.next;
 		current.next = newNode;
 
		counter++;
	}
    
    public void removeAtHead() {        
        if (size() < 1) {
            return NoSuchElementException();
        }
        
        Node current = head;
        head = head.next;
        current = null;
        
        counter--;
    
    }
    
     public void removeAtTail() {
        if (size() < 1) {
            return NoSuchElementException();
        }
         
        Node current = head;

        while(current.next.next != null) {
          current = current.next;
        }

        current.next = null;
         
        counter--;
    
    }
    
    public void removeAtIndex(int index) {
        if (index < 1 || index > size()) {
            return NoSuchElementException();
        }

        Node current = head;

        if (head != null) {
            for (int i = 0; i < index; i++) {
                current = current.next;
            }

            current.next = current.next.next;
            counter--;
        }

    }

    public Node get(int index) {
        if (index < 0) return null;
        Node current = null;

        if (head != null) {
            current = head.getNext();
            for (int i = 0; i < index; i++) {
                if (current.next == null) {
                    return null;
                }
                current = current.next;
            }
        }

        return current;

    }
    
    public boolean isEmpty() {
        return size() == 0;
    }

    public int size() {
        return counter;
    }
}